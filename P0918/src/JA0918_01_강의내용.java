
public class JA0918_01_강의내용 {

	public static void main(String[] args) {
		// 추상클래스: 클래스가 설계도라면 추상클래스는 미완성클래스(인스턴스생성X)
		// 추상메소드: 선언부만 있고 구현부가 없는 메소드({}x)
		// 일반메소드가 추상메소드를 호출할 수 있따
		// 다른 클래스를 작성하는 데 도움을 줄 목적으로 작성된다
		// 꼭 필요하지만 자손마다 다르게 구현될 것으로 예상되는 경우 사용
		// 추상클래스를 상속받는 자손클래스에서 추상메소드의 구현부를 완성해야한다

		AudioPlayer a = new AudioPlayer();// 미완성메소드 모두 구현됨 객체선언가능
		AAPlayer aa = new AAPlayer(); // 미완성메소드 모두 구현됨 객체선언가능

//		Player  p = new Player(); // 미완성메소드가 존재하기에 사용이 불가하다
//		AbsPlayer abs = new AbsPlyer(); //미완성메소드가 존재하기에 사용이 불가하다

		// 인터페이스: 모두 추상 메소드여야 한다 
		// 일종의 추상클래스 추상화정도가 높다 실제 구현된 적이 없는 기본 설계도
		// 추상메소드와 상수만을 멤버로 가질수가 있다
		// 인스터슨를 생성할 수 없고 클래스 작성에 도움을 줄 목적으로 사용된다
		// 미리 정해진 규칙에 맞게 구현하도록 표준을 제시하는 데 사용된다
		// 클래스 대신 인터페이스를 사용한다는 것 외에는 클래스 작성과 동일하다
		// 인터페이스도 클래스처럼 상속이 가능하다(클래스와 달리 다중상속 허용)
		// object클래스와 같은 최고 조상이 없다.
		// 인터페이스를 구현하는 것은 클래스를 상속받는 것과 같다 extends 대신 implements를 사용한다
		// 인터페이스에 정의된 추상메소드를 완성해야 한다 상속과 구현이 동시에 가능하다
		// 인터페이스타입의 변수로 인터페이스를 구현한 클래스의 인스턴스를 참조할 수 있따
		// 인터페이스를 메소드의 매개변수 타입으로 지정할 수 있다
		// 인터페이스를 메소드의 리턴타입으로 지정할 수 있다
		// 두 객체 간의 연결 대화 소통을 돕는 중간역할을 한다
		// 선언과 구현을 분리시키는 것을 가능하게 한다
		// 클래스를 사용하는 유저쪽과 클래스를 제공하는 프로바이더쪽이 있다.

	}

}
